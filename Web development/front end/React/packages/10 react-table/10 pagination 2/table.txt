
import React, { useMemo } from 'react'
import  {useTable, usePagination} from 'react-table';
import DATA from '../data.json';

const COLUMNS = [
	{
		Header: "id",
		accessor : "id",
		Footer : "id",
	
	},
	{
		Header : "First Name",
		accessor : "first_name",
		Footer : "First Name",
	
	},
	{
		Header : "Last Name",
		accessor : "last_name",
		Footer : "Last Name",
	
	},
	{
		Header : "Date of Birth",
		accessor : "date_of_birth",
		Footer : "Date of Birth",
	
		
	},
	{
		Header : "Country",
		accessor : "country",
		Footer : "Country",
	
	},
	{
		Header : "Phone",
		accessor : "phone",
		Footer : "Phone",

	}
]





function Table(){


	const columns = useMemo(()=> COLUMNS, []);
	const data = useMemo(()=> DATA, []);

	const tableInstance = useTable({
		columns,
		data,
		initialState : {pageIndex : 0}
	}, usePagination)
    

	const  {
		getTableProps,
		getTableBodyProps,
		headerGroups,
		page,
	
		nextPage,
		previousPage,
		canNextPage,
		canPreviousPage,
		state,
		pageOptions,
		gotoPage,
		pageCount,

		prepareRow,
	} = tableInstance;

  
	const {pageIndex} =state;
	return(
		<>

				
		      <table className = "table table-striped table-bordered " {...getTableProps()}>
				  <thead className = "bg-primary" >
					  {
						  headerGroups.map(headerGroup =>(
							  <tr {...headerGroup.getHeaderGroupProps()}>
								  {
									  headerGroup.headers.map(column=> (
										  <th {...column.getHeaderProps()}>
											  {column.render('Header')}
											  
									
											 
										  </th>
									  ))
								  }

							  </tr>
						  ))
					  }
				  </thead>
				  <tbody {...getTableBodyProps()}>
					  {
						  page.map(row=> {
							  prepareRow(row)
							  return(
								  <tr{...row.getRowProps()}>
									{row.cells.map(cell => {
										return(
											<td {...cell.getCellProps()}>
												{cell.render('Cell')}
											</td>
										)
									})}
								  </tr>	
							  )
						  })
					  }
					


				  </tbody>

			  </table>

			  <div>
				  <span>
					  Page {' '}
					  <strong>
						  {pageIndex + 1} of {pageOptions.length}
					  </strong>
				  </span>
				  <span>
					  Go to page : {" "}
					  <input type = "number" defaultValue = {pageIndex +1} onChange = {e => {
						  const pageNumber = e.target.value ? Number(e.target.value) -1 : 0
						  gotoPage(pageNumber)
					  }} />
				  </span>
				  <button onClick = {()=> gotoPage(0)} disabled = {!canPreviousPage}  > {"<<" }</button>
				  <button onClick = {()=> previousPage()} disabled = {!canPreviousPage}  >Prev</button>
				  <button onClick = {()=> nextPage()} disabled = {!canNextPage} >Next</button>
				  <button onClick = {()=> gotoPage(pageCount - 1) } disabled = {!canNextPage} > {">>"} </button>
			  </div>

		</>

	)
}
export default Table;