import React, { useMemo } from 'react'
import  {useTable, useSortBy, useGlobalFilter, usePagination} from 'react-table';
import DATA from './data.json';

const COLUMNS = [
	{
		Header: "id",
		accessor : "id"
	},
	{
		Header : "First Name",
		accessor : "first_name"
	},
	{
		Header : "Last Name",
		accessor : "last_name"
	},
	{
		Header : "Date of Birth",
		accessor : "date_of_birth"
	},
	{
		Header : "Country",
		accessor : "country"
	},
	{
		Header : "Phone",
		accessor : "phone"
	},
	{
		Header : "update / delete",
	}
]


function GlobalFilter({filter, setFilter}){
    return(
        <>
            <span>
                search : { " "},
                <input className='form-control m-2 ' value = {filter || ""} onChange = {(e)=> setFilter(e.target.value)} />
            </span>

        </>

    )
}




function Table(){

	const columns = useMemo(()=> COLUMNS, []);
	const data = useMemo(()=> DATA, []);

	const tableInstance = useTable({
		columns,
		data,
		initialState: { pageIndex: 0, pageSize: 20 }
	}, useGlobalFilter, useSortBy, usePagination)

	const  {
		getTableProps,
		getTableBodyProps,
		headerGroups,
		// rows,
		prepareRow,
		state,
		setGlobalFilter,
		page,
		pageOptions,
		previousPage,
		canPreviousPage,
		nextPage,
		canNextPage,
		setPageSize,
		gotoPage

	} = tableInstance;
	const {globalFilter} = state;
	const {pageIndex, pageSize }  = state;
	return(
		<>
				<GlobalFilter filter = {globalFilter} setFilter = {setGlobalFilter} />
                <table className='table table-striped' {...getTableProps()}>
                    <thead className='bg-primary' >
                        {
                            headerGroups.map(headerGroup => (
                                <tr {...headerGroup.getHeaderGroupProps()}>
                                     {
                                         headerGroup.headers.map(column =>(
                                             <th {...column.getHeaderProps(column.getSortByToggleProps())}>
                                                {column.render("Header")}
                                                {column.isSorted?(column.isSortedDesc?' Desce' : '' ): ""}
                                             </th>
                                         ))
                                     }   
                                </tr>
                            ))
                        }

                    </thead>
                    <tbody {...getTableBodyProps()} >
                        {
                            page.map(row =>{
                                prepareRow(row)
                                return(
                                    <tr{...row.getRowProps()}>
                                        {
                                            row.cells.map(cell => {
                                                return(
                                                    <td {...cell.getCellProps()}>
                                                        {cell.render('Cell')}
                                                    </td>
                                                )
                                            })
                                        }

                                    </tr>
                                )
                            })
                        }
                    </tbody>
                </table>
				<div>
				<span>
					  Page {' '}
					  <strong>
						  {pageIndex + 1} of {pageOptions.length}
					  </strong>
				  </span>

				  <span>
					  Go to page : {" "}
					  <input className='btn btn-primary' type = "number" defaultValue = {pageIndex +1} onChange = {e => {
						  const pageNumber = e.target.value ? Number(e.target.value) -1 : 0
						  gotoPage(pageNumber)
					  }} />
				  </span>

				  <select className='btn btn-primary' value = {pageSize} onChange = {e=> setPageSize(Number(e.target.value))}>
					  {
						  [10,50,100].map(pageSize => (
							  <option key ={pageSize} value = {pageSize}>
								  Show {pageSize}
							  </option>
						  ))
					  }
				  </select>
				  <button className='btn btn-primary' onClick={()=> previousPage()} disabled = {!canPreviousPage} > Prev </button>
				  <button className='btn btn-primary' onClick={()=> nextPage()} disabled = {!canNextPage} > next </button>
				</div>
		</>
	)
}


export default Table;
